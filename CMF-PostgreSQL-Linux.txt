#---------------------------------------------------------------------------------------------------------------------------*
#  Purpose        : Script to fetch Information from PostgreSQL.
#  Schedule       : Ad-Hoc / On-Demand
#  Date           : 15-June-2023
#  Author         : Rackimuthu Kandaswamy , Sireesha , VenkannaBabu , Saby
#  Version        : 1.1
#   
#  INPUT          : Server List and other parameters in Excel file
#  VARIABLE       : NONE
#  PARENT         : NONE
#  CHILD          : NONE
#---------------------------------------------------------------------------------------------------------------------------*
#---------------------------------------------------------------------------------------------------------------------------*
#
#  IMPORTANT NOTE : The script has to be run on Non-Mission-Critical systems ONLY and not on any production server...
#
#---------------------------------------------------------------------------------------------------------------------------*
#---------------------------------------------------------------------------------------------------------------------------*
# Usage:
# Powershell.exe -File .\CMF-PostgreSql_Server_Automation_V1.1.ps1
#
#change Log 31st July 2023 Sireesha Error Handling and PSQL validation 

#$folder = the working dicectory , where the scripts are saved

CLS

  function exitCode{
    Write-Host "-Ending Execution"
    exit
}

function createFolder([string]$newFolder) {
    if(Test-Path $newFolder)
    {
        Write-Host "-Folder'$newFolder' Exist..."
    }
    else
    {
        New-Item $newFolder -ItemType Directory
        Write-Host "-$newFolder folder created..."
    }
}




#---------------------------------------------------------PROGRAM BEGINS HERE----------------------------------------------------------



write-host "                                                                                       " -BackgroundColor DarkMagenta
Write-Host "       Welcome to CMF - PostgreSQL_Server_Info_Gathering_Automation                    " -ForegroundColor white -BackgroundColor DarkMagenta
write-host "                  (OSS DB Migration factory)                                           " -BackgroundColor DarkMagenta
write-host "                                                                                       " -BackgroundColor DarkMagenta
Write-Host " "

$folder = pwd #$PSScriptRoot

$today_date=Get-Date -Format "MM_dd_yyyy_HH_mm"
Start-Transcript -path  $folder\Logs\CMF_PostgreSQL_Server_Info_Gathering_Automation_Transcript_$today_date.txt -Append

Write-Host "======================================================================================= "
createFolder $folder\Downloads\
createFolder $folder\Output\

Write-Host ""
Write-Host "======================================================================================= "

 Write-Host "Input Section "   -ForegroundColor Green
<#Check for ImportExcel module
Write-Host "======================================================================================= "
Write-Host "Checking for ImportExcel Module"
if((Get-Module -ListAvailable).Name -notcontains "ImportExcel")
{
    Write-Host "Excel PS module not found." -ForegroundColor red
    $validInputs_Yes_No = "y", "n","Y","N"
     
    Write-Host    "Please press 'Y' to continue download and install ImportExcel Module.Press 'N' to terminate the execution (Y or N) " -ForegroundColor Green
    Write-Host "======================================================================================="
    do {
    $response = Read-Host "Please provide your inputs"
    if(-not $validInputs_Yes_No.Contains($response)){write-host "Please Enter a valid input (Y or N )"}
    
    }until ($validInputs_Yes_No.Contains($response.ToLower()))

    if ($response -eq "n")
    {
        exitcode
    }          
        if($response -eq "Y")
        {
    Write-Host "Downloading ImportExcel PS Module and install it. Please wait ..." -ForegroundColor Green
    [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
    Set-PSRepository -Name "PSGallery" -InstallationPolicy Trusted
    try { Install-Module -Name ImportExcel} 
            catch {

               Write-Host "======================================================================================="
               Write-Host "Error while downloading Importexcel package , Please make sure computer is connected to internet "  -ForegroundColor Red  
               Write-Host "Or "  -ForegroundColor Red 
               Write-Host "Please install it manually "  -ForegroundColor Red   
               Write-Host "========================================================================================== "
               Write-Host "Please see the error below & execution has been stopped          " 
            throw  $_.Exception.Response.StatusCode.Value__
            }
    
    Write-Host "Downloaded."
    <#Expand-Archive "$folder\Downloads\ImportExcel.zip" "$folder\Downloads\"
    move "$folder\Downloads\ImportExcel-7.8.0" "C:\Program Files\WindowsPowerShell\Modules\ImportExcel"
    #Import-Module ImportExcel
    if (find-module -Name "ImportExcel")
    {
        write-Host "ImportExcel Module installed successfully" -ForegroundColor Green
    }
    }
    else
    {
    Write-Host "ImportExcel PS Module installation is not successful. Please install manually and re-run automation script" -ForegroundColor Red
	exitcode
    }
}
else
{
   Write-Host "ImportExcel PS Module is already installed" -ForegroundColor Green
}
#>
#Write-Host "Checking for PSQL path" -ForegroundColor white

$psql_ver = psql --version


<#$psql_validdation_file_path=$Folder+"\psql_validation.bat"
$psql_Log_File=$Folder+"\Output\psql_validation.log"
$psql_OP = Start-Process -FilePath $psql_validdation_file_path  -ArgumentList "$psql_Log_File"-Wait -WindowStyle Hidden
$error_msg=Get-content -path $psql_Log_File | out-string
$error_msg1=$error_msg.tolower()
if (Test-Path $psql_Log_File) {
    
    if ($error_msg1 -like ("*is not recognized as an internal or external command*")){
    #Write-host $path_check -ForegroundColor red
    write-host "Either Postgresql client tool is not installed on the server or psql Path is not set in environment variable" -ForegroundColor red 
    write-host ""
    write-host "Please configure as appropriate and re-run automation script"
    exitcode
    }
    else
    {
        Write-host "Psql validated successfully"  -ForegroundColor green
    }
    

    }else
    {
        write-host "Error in validating psql" -ForegroundColor red
        Write-Host "Please check and re-run the script"
        exitcode
    }
    Write-host ""
#>
    $validInputs_Yes_No = "y", "n","Y","N"
     
    Write-Host    "Please press Y to continue PostgreSQL Info-Gathering .Press N to terminate the execution " -ForegroundColor Green
    Write-Host "======================================================================================="
    
    do {
    $response = read-host "Please provide your inputs"
    if(-not $validInputs_Yes_No.Contains($response)){write-host "Please Enter a valid input (Y or N )"}
    
    }until ($validInputs_Yes_No.Contains($response.ToLower()))

    if($response -eq "n"){exitcode}    
  
   <# Write-Host "=======================================================================================" 
    Write-Host "Going to initiate the PostgreSQL Server Assessment Process . Please press Y to continue .
    Press any other key to abort the execution " -ForegroundColor Green
    Write-Host "=======================================================================================" 
    $response = read-host "Please provide your inputs"

  if($response -ne "Y")
      {
        exitCode
    }#>

# Read the input config Excel and validate
$inputfile = "$folder/CMF-PostgreSQL_Server_Input_file.xlsx"
Write-Host "Input file is $inputfile." -ForegroundColor Green
Write-Host "======================================================================================="


if (-not(Test-Path -Path $inputfile -PathType Leaf)) {
     try {    
         Write-Host "======================================================================================="  
         Write-Host "Unable to read the input file [$inputfile]. Check file & its permission...  "  -ForegroundColor Red  
         Write-Host "======================================================================================="  
         Write-Host "Please see the error below & execution has been stopped          "  
         throw $_.Exception.Message                      
     }
     catch {
         throw $_.Exception.Message
     }
 }
else
{
     try {
         $sqllist_Read_Excel = Import-Csv -Path $inputfile #-WorksheetName Server_List
         $Approved_Rows = $sqllist_Read_Excel | Where-Object { $_.Approval_Status.toupper() -eq "YES" }

         $ConfigList = $Approved_Rows | Group-Object -Property 'Host_Name' | ForEach-Object {
    $_.Group | Select-Object -First 1
	}
        $Rowcount=0

        foreach($row in $ConfigList){
            $Hostname = $row.'Host_Name'
            $Rowcount=$Rowcount+1
        }
    }
     catch {
         Write-Host "=================================================================================="  
         Write-Host "The file [$inputfile] does not have the woksheet named Server_List  "  -ForegroundColor Red  
         Write-Host "=================================================================================="  
         Write-Host "Please see the error below &execution has been stopped          "  
         throw $_.Exception.Message
     }

if($ConfigList.count -eq 0){

write-host "None of the hosts are approved to proceed . Terminating the execution" -ForegroundColor Red

exitcode

}

     $ColumnList=$ConfigList | Get-Member -MemberType NoteProperty | %{"$($_.Name)"}
     if (($ColumnList.Contains("Host_Name")) -and
        ($ColumnList.Contains("User_ID")) -and
        ($ColumnList.Contains("Password")) -and
        ($ColumnList.Contains("DB_Name")) -and
        ($ColumnList.Contains("tenant")) -and
        ($ColumnList.Contains("Subscription_ID")) -and
        ($ColumnList.Contains("SSL_Mode"))){

        Write-Host "Excel validation is done successfully " 
        }
     else {
        Write-Host "There are missmatches in the Excel column . Kindly check and retrigger the automation "  -ForegroundColor Red 
        exitCode }
  }


##Input Excel validation is done



Write-Host "=======================================================================================" 
Write-Host "Here are the List of the Hosts the automation will proceed based on the user selection -" -ForegroundColor Green
Write-Host "=======================================================================================" 

$db_Selection_Display=@()

Write-Host ($ConfigList | select Host_Name | Format-Table | Out-String)
  
Write-Host "=======================================================================================" 
Write-Host "Please enter Y if you wish to continue , otherwise please press N to exit" -ForegroundColor Green
Write-Host "=======================================================================================" 
do {
    $response1 = Read-Host "Please provide your inputs"
    if(-not $validInputs_Yes_No.Contains($response1)){write-host "Please Enter a valid input (Y or N )"}   
}until ($validInputs_Yes_No.Contains($response1.ToLower()))

 if($response1 -eq "n"){exitcode} 

$i = 0
#$Output_data=@("Source_Instance","Target_Instance","Log_Shipping_Status","Comments")
$Output_data =@()

foreach ($row_Content in $ConfigList) {

    $Host_Name=$row_Content.'Host_Name'
    if ([string]::IsNullOrWhitespace($Host_Name)){
        Write-Host "'Host_Name' is not valid in the Server_List worksheet. Kindly check and retrigger the automation  "  -ForegroundColor Red 
        Continue
    }

    $User_ID=$row_Content.'User_ID'
    if ([string]::IsNullOrWhitespace($User_ID)){
        Write-Host "'User_ID' is not valid in the Server_List worksheet. Kindly check and retrigger the automation  "  -ForegroundColor Red 
        Continue
    }

    $Password=$row_Content.'Password'
    if ([string]::IsNullOrWhitespace($Password)){
        Write-Host "'Password' is not valid in the Server_List worksheet. Kindly check and retrigger the automation  "  -ForegroundColor Red 
        Continue
    }

    $DB_Name=$row_Content.'DB_Name'
    if ([string]::IsNullOrWhitespace($DB_Name)){
        Write-Host "'DB_Name' is not valid in the Server_List worksheet. Kindly check and retrigger the automation  "  -ForegroundColor Red 
        Continue
    }

    $SSL=$row_Content.'SSL_Mode'
	if(($SSL -eq "") -or ($SSL -eq $null) -or ($SSL -eq " ")) {
		
		Write-Host "'SSL Mode' is not valid in the Server_List worksheet. Kindly provide the right mode and retrigger the automation  "  -ForegroundColor Red 
		Continue
    }

	$Port=$row_Content.'Port'
	#if(($Port -eq "") -or ($Port -eq $null) -or ($Port -eq " ")) {
	if ([string]::IsNullOrWhitespace($Port)){
		$Port = 5432
		#Write-Host "'Port' is not valid in the Server_List worksheet. Kindly check and retrigger the automation  "  -ForegroundColor Red 
		Continue
	}
	
	#write-host "User: $User_ID"
	#write-host "Host: $Host_Name"

    #$Trigger_File_Path="$folder/Trigger_PGsql.bat"

    #$account_name = Read-Host "Enter the project name "
    $date = Get-Date -Format "dd-HH-mm"
    $Log_Name= $Host_Name.replace(".", "_")
    $Log_Name=$Log_Name+"_"+$date
    $DbGather_Path = "$folder/PostgreSQL_Templates/pg_db_gather.sql"
    $Log_File = "$folder/Output/$Log_Name.log"

    
    Write-Host "Checking for PSQL path" -ForegroundColor Green

    ## Check whether PostgreSQL is installed or not
    $psql_ver = psql --version

    if($psql_ver.Contains("psql (PostgreSQL)")) {

        ##Execute PostgreSQL command 
        Write-Host "=======================================================================================" 
        Write-host "Inititating Info-Gathering for " $Host_Name -ForegroundColor Green
        
        #$Mysql_OP = Start-Process -FilePath $Trigger_File_Path -ArgumentList "$User_ID", "$Host_Name", "$Password" , "$DB_Name" , "$DbGather_Path" , "$Log_File" -Wait -WindowStyle Hidden
        
        sh trigger_postgresql.sh $User_ID $Host_Name $Password $DB_Name $Port $DbGather_Path $Log_File $SSL


        if (Test-Path $Log_File) {
            $size = (Get-Item $Log_File).Length
            if($size -gt 1000) {
                Write-host "Information Gathered is stored at "$Log_File
                Write-host "Info-Gathering Successfully  completed for " $Host_Name -ForegroundColor Green
    
                $Output_data += New-Object psobject -Property @{Host_Name=$Host_Name;Status="SUCCESS";LOG_File_Location=$Log_File;Error_msg="NA"}
            }
            else {

                $error_msg=Get-Content -path $Log_File | Out-String
                $Output_data += New-Object psobject -Property @{Host_Name=$Host_Name;Status="FAILED";LOG_File_Location=$Log_File;Error_Msg=$error_msg}

                <#Write-Host $error_msg -ForegroundColor red  
                Write-Host "Error details are stored at "$Log_File
                if ($error_msg -like ("*is not recognized as an internal or external command*"))
                {
                    Write-Host "Either Postgresql client tool is not installed on the server or psql Path is not set in environment varibale" -ForegroundColor red 
                    exitcode
                }#>
            }
        }
        else {
            $Output_data += New-Object psobject -Property @{Host_Name=$Host_Name;Status="FAILED";LOG_File_Location="NA";Error_Msg="NA"}
        }
    }
    else {
        Write-Host "PostgreSQL is not installed, please install Postgresql..!!" -ForegroundColor Red
    }

    $i = $i + 1
}
# End Read config For each


 Write-Host "" 
Write-Host "======================================================================================="  
Write-Host "Below is The final status of PostgreSQL Script Execution "  -ForegroundColor Green  
Write-Host "======================================================================================="

#Write-Host ($Output_data | select Host_Name,Status,LOG_File_Location,Error_Msg| Format-Table -AutoSize -wrap| Out-String)  
Write-Host ($Output_data | select Host_Name,Status,Error_Msg| Format-Table -AutoSize -wrap| Out-String)  

if ($Output_data -ne "")
{
    $Output_data | select Host_Name,Status,LOG_File_Location,Error_Msg | Export-Excel $PSScriptRoot\Output\Output.log -WorksheetName "PostgreSQL_Server" -TableStyle Medium16 -title "PostgreSQL Server Status" -TitleBold    
}
Stop-Transcript
exitcode
